delimiters "%", "%"

templateComment(tablename) ::= <<
/**
* <auto-generated />
* This file was generated by a StringTemplate 4 template.
* Don't change it directly as your change would get overwritten. Instead, make changes
* to the .stg file (i.e. the StringTemplate 4 template file) and save it to regenerate this file.
*
* For more infor on StringTemplate 4 template please go to -
* https://github.com/antlr/antlrcs
*
* @author  Kola Oyewumi
* @version 1.0.0
* @since   2017-01-03
*
* A class which represents the %tablename% table.
*/

>>


packageLine(packageLine) ::= <<
%packageLine%
>>

importLines(importLines) ::= <<

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonRootName;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.sugaronrest.restapicalls.Module;
import com.sugaronrest.restapicalls.CustomDateDeserializer;
import com.sugaronrest.restapicalls.CustomDateSerializer;

%importLines%
>>


classStart(name,modulename,tablename) ::= <<
@Module(name = "%modulename%", tablename = "%tablename%")
@JsonRootName(value = "%tablename%")
@JsonIgnoreProperties(ignoreUnknown = true)
public class %name% {
>>

property(name, columnname, backingField, type) ::= <<

    public %type% get%name%() {
        return %backingField%;
    }

    public void set%name%(%type% value) {
        %backingField% = value;
    }

>>

backingField(columnname, field, type) ::= <<
    @JsonProperty("%columnname%")
    private %type% %field%;
  >>

backingDateField(columnname, field, type) ::= <<
    @JsonProperty("%columnname%")
    @JsonDeserialize(using = CustomDateDeserializer.class)
    @JsonSerialize(using = CustomDateSerializer.class)
    private %type% %field%;
  >>

classEnd() ::= <<
}
>>

